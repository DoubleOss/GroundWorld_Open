buildscript {
    repositories {

        maven {url = 'https://maven.minecraftforge.net/'}
        jcenter()
        mavenCentral()

    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '4.5'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'GroundWorld'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'


minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            //args '--username=KonG7'
            args '--username=samsik23'
            //args '--username=Daju_'




            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

compileJava.options.encoding = 'UTF-8'
repositories {
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    mavenLocal()
}

repositories {
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
configurations {
    runtimeLibraries
}
//jar 파일 이식

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
// https://mvnrepository.com/artifact/software.bernie.geckolib/geckolib-forge-1.12.2
    implementation group: 'org.json', name: 'json', version: '20220320'
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2:3.0.31')
    implementation 'com.grack:nanojson:1.7'

    runtimeLibraries 'com.grack:nanojson:1.7'
    //runtimeLibraries 'com.grack:nanojson:1.7'

//    implementation("net.dv8tion:JDA:5.0.0-beta.20")
//    runtimeLibraries 'net.dv8tion:JDA:5.0.0-beta.20' //이게 넣는 코드


//    implementation group: 'org.json', name: 'json', version: '20220320'
//    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2:3.0.31')
    //implementation (files('/libs/voicechat-forge-1.12.2-2.5.15.jar'))


    //compile 'net.dv8tion:JDA:5.0.0-beta.20'
    //implementation("net.dv8tion:JDA:5.0.0-beta.24")
    //implementation group: 'net.dv8tion', name: 'JDA', version: '5.0.0-beta.24'
    //compile group: 'org.json', name: 'json', version: '20220320'
    //compile fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2:3.0.31')
    //compile("net.dv8tion:JDA:5.0.0-beta.20")
    //implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.12.2-3.0.31')
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                'FMLCorePlugin': 'com.hud.FakeModLoader',
                'FMLCorePluginContainsFMLMod': 'true',
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}"
        ])
    }
    from {
        configurations.runtimeLibraries.collect { zipTree(it) }
    }
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        }

    }
}

sourceSets { main { output.resourcesDir = output.classesDir } }